// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    refresh_token_expires_in Int?    @db.Integer
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]      @relation(name: "UserPosts")
    comments      Comment[]   @relation(name: "UserComments")
    subreddits    Subreddit[]
    votes         Vote[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id        String    @id @default(cuid())
    title     String
    body      String
    url       String
    thumbnail String?
    createdAt DateTime  @default(now())
    author    User      @relation(name: "UserPosts", fields: [userId], references: [id])
    userId    String
    comments  Comment[] @relation(name: "PostComments")

    subreddit   Subreddit? @relation(name: "SubredditPosts", fields: [subredditId], references: [id])
    subredditId String?
    votes       Vote[]     @relation(name: "PostVotes")
}

model Comment {
    id            String    @id @default(cuid())
    body          String
    createdAt     DateTime  @default(now())
    author        User      @relation(name: "UserComments", fields: [userId], references: [id])
    post          Post      @relation(name: "PostComments", fields: [postId], references: [id])
    parentComment Comment   @relation(name: "CommentReplies", fields: [commentId], references: [id])
    userId        String
    postId        String
    replies       Comment[] @relation(name: "CommentReplies")
    commentId     String
    Vote          Vote[]    @relation(name: "CommentVotes")
}

model Subreddit {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    creator     User?    @relation(fields: [userId], references: [id])
    posts       Post[]   @relation(name: "SubredditPosts")
    userId      String
}

model Vote {
    id        String        @id @default(cuid())
    direction VoteDirection
    createdAt DateTime
    user      User          @relation(fields: [userId], references: [id])
    post      Post?         @relation(name: "PostVotes", fields: [postId], references: [id])
    comment   Comment?      @relation(name: "CommentVotes", fields: [commentId], references: [id])
    userId    String
    postId    String
    commentId String?
}

enum VoteDirection {
    UP
    DOWN
}
